To make sure that the component updates when the route changes, you can use a `watch` function to listen to changes in the `userToLoad` computed property. When the `userToLoad` changes, you can update the `user` object and the `username` computed property accordingly.

Here's an updated version of your code that includes the `watch` function:

```
<template>
  <div>{{username}}</div>
</template>

<script lang="ts">
import { computed, defineComponent, ref, getCurrentInstance } from '@vue/composition-api';

export const useUsername = ({ user }) => {
  return { username: user.name };
};

export default defineComponent({
  setup(props, { root }) {
    const vm = getCurrentInstance();

    const userToLoad = computed(() => root.$route.params.userId);
    const listOfUsers = [
      { userId: 1, name: 'user1' },
      { userId: 2, name: 'user2' },
    ];

    let user = listOfUsers.find((u) => u.userId === +userToLoad.value);
    if (!user) {
      return root.$router.push('/404');
    }

    const { username } = useUsername({ user });

    // watch for changes in the userToLoad computed property
    // and update the user and username accordingly
    watch(userToLoad, (newValue) => {
      user = listOfUsers.find((u) => u.userId === +newValue);
      if (!user) {
        return root.$router.push('/404');
      }
      const { username } = useUsername({ user });
     