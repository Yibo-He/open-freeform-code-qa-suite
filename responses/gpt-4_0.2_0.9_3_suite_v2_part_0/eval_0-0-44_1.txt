In Mongoose, you can create an index on a field in the schema by using the `@Prop` decorator with the `index` or `unique` option. However, Mongoose will not automatically create indexes defined in your schema at server startup. You need to manually tell Mongoose to create the indexes.

Here's how you can do it:

```javascript
import { SchemaFactory } from '@nestjs/mongoose';

@Schema()
export class MySchemaClass extends Document {

  @Prop()
  _id: string;

  @Prop({required: true, index: true})
  type: string;

  @Prop()
  creationDate: string;

  @Prop()
  name: string;
}

export const MySchema = SchemaFactory.createForClass(MySchemaClass);
```

Then in your service or wherever you are using the model, you can call `ensureIndexes()` function after creating the model. 

```javascript
import { Model } from 'mongoose';
import { Injectable } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { MySchemaClass } from './schemas/my-schema.schema';

@Injectable()
export class MyService {
  constructor(@InjectModel(MySchemaClass.name) private myModel: Model<MySchemaClass>) {
    this.myModel.ensureIndexes((err) => {
      if (err) console.log(err);
    });
  }
}
```

The `ensureIndexes()` function tells Mongoose to create any indexes defined in your schema that do not exist in the MongoDB server. Mongoose will call `ensureIndexes()` for you automatically when you use `mongoose.connect()` or `mongoose.createConnection()`. 

Please note that `ensureIndexes()` is an asynchronous operation. It's recommended to handle this at the application startup.