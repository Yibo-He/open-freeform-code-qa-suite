Yes, you can accomplish this by using the `ref` attribute in React. You can create a `ref` to your form in the `CustomForm` component and then pass a function to submit the form from the `App` component.

Here is how you can do it:

```javascript
import React, { Component } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  formRef = React.createRef();

  handleSubmit = () => {
    if (this.formRef.current) {
      this.formRef.current.dispatchEvent(new Event('submit', { cancelable: true }));
    }
  }

  render() {
    return (
      <form id='my-form' ref={this.formRef} onSubmit={(e) => {e.preventDefault(); alert('Form submitted!')}}>
        <button type='submit'>Inside Custom</button>
      </form>
    );
  }
}

function App() {
  let customFormRef = React.createRef();

  const submitForm = () => {
    if (customFormRef.current) {
      customFormRef.current.handleSubmit();
    }
  }

  return (
    <div>
      <CustomForm ref={customFormRef} />
      <button onClick={submitForm}>In Root</button>
    </div>
  );
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In the `CustomForm` component, a `ref` is created for the form and a `handleSubmit` function is defined to dispatch a submit event on the form. The `handleSubmit` function is then called from the `App` component when the 'In Root' button is clicked. 

Please note that the `onSubmit` event handler in the form is modified to prevent the default form submission behavior, which is to refresh the page.