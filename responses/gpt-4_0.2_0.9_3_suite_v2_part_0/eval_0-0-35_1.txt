You should be using `REDIS_TLS_URL` if you're connecting to Heroku Redis over TLS. Here's a simple example of how you can connect to Heroku Redis using TLS in Node.js with the `node_redis` library:

```javascript
var redis = require('redis');
var url = require('url');

var redisURL = url.parse(process.env.REDIS_TLS_URL);
var client = redis.createClient(redisURL.port, redisURL.hostname, { no_ready_check: true });

client.auth(redisURL.auth.split(":")[1]);

client.on('connect', function() {
    console.log('Connected to Redis');
});

client.on('error', function (err) {
    console.log('Redis error: ' + err);
});
```

In this example, we're using the `url` module to parse the `REDIS_TLS_URL` environment variable provided by Heroku. We then create a new Redis client using the port and hostname from the parsed URL. The `no_ready_check` option is set to `true` to suppress the READY check which can cause issues when connecting over TLS.

The `auth` method is used to authenticate with the Redis server using the password from the parsed URL.

Finally, we add event listeners for the 'connect' and 'error' events to log when the client has connected or encountered an error.

Remember to replace `REDIS_TLS_URL` with your actual Redis URL.