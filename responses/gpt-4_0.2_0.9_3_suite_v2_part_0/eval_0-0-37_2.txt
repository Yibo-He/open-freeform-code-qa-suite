Sure, in NestJS, you can define optional parameters by using a question mark (`?`) at the end of the parameter name in the route definition. However, this is not applicable to parameters in the middle of the route. 

For your case, you can create multiple route handlers to cater for the different possible routes. Here's how you can do it:

```typescript
@Controller('route')
export class YourController {
  @Get(':param1/config')
  getConfig(@Param('param1') param1: string) {
    // handle route/aa/config
  }

  @Get(':param1/config/:OptionalParam2')
  getConfigWithOptionalParam2(@Param('param1') param1: string, @Param('OptionalParam2') OptionalParam2: string) {
    // handle route/aa/config/bb
  }

  @Get(':param1/config/:OptionalParam2/:OptionalParam3')
  getConfigWithOptionalParam3(@Param('param1') param1: string, @Param('OptionalParam2') OptionalParam2: string, @Param('OptionalParam3') OptionalParam3: string) {
    // handle route/aa/config/bb/cc
  }
}
```

This way, you can handle all three cases of your route.