Sure, I can help you with that. Here is a recursive function that will traverse the object tree and return the object with the specified id.

```javascript
function findObject(obj, id) {
    if (obj.id === id) {
        return obj;
    } else if (obj.child) {
        var result = null;
        for (var i = 0; result == null && i < obj.child.length; i++) {
            result = findObject(obj.child[i], id);
        }
        return result;
    }
    return null;
}
```

This function works by checking if the current object's id matches the id we're looking for. If it does, it returns the object. If it doesn't, it recursively calls itself on each of the object's children. If the object is found in one of the children, it is returned. If the object is not found in any of the children, `null` is returned.

You can use this function like this:

```javascript
var obj = {
    "id": "A",
    "name": "Item A",
    "child": [
        {
            "id": "B",
            "name": "Item B",
            "child": [
                {
                    "id": "C",
                    "name": "Item C",
                    "child": []
                }
            ]
        },
        {
            "id": "D",
            "name": "Item D",
            "child": []
        }
    ]
};

console.log(findObject(obj, "C"));
```

This will output:

```javascript
{
  "id": "C",
  "name": "Item C",
  "child": []
}
```