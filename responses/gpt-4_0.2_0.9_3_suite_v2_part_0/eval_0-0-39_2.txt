Yes, you can accomplish this by using the `ref` attribute in React. You can create a reference to your form in the `CustomForm` component, and then use this reference to submit the form when the 'In Root' button is clicked.

Here's how you can do it:

```javascript
import React, { Component, createRef } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  formRef = createRef();

  componentDidMount() {
    this.props.setFormRef(this.formRef);
  }

  render() {
    return (
      <form id='my-form' ref={this.formRef} onSubmit={(e) => {e.preventDefault(); alert('Form submitted!')}}>
        <button type='submit'>Inside Custom</button>
      </form>
    );
  }
}

class App extends Component {
  formRef = createRef();

  setFormRef = (ref) => {
    this.formRef = ref;
  }

  handleSubmit = () => {
    if (this.formRef.current) {
      this.formRef.current.dispatchEvent(new Event('submit', { cancelable: true }));
    }
  }

  render() {
    return (
      <div>
        <CustomForm setFormRef={this.setFormRef} />
        <button onClick={this.handleSubmit}>In Root</button>
      </div>
    );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In this code:

- We create a `ref` in the `CustomForm` component and assign it to the form.
- We pass a function `setFormRef` as a prop to `CustomForm` from `App` component, which will be used to pass the form reference back to the `App` component.
- In the `App` component, we create a `handleSubmit` function that will be triggered when the 'In Root' button is clicked. This function checks if the form reference is available and if it is, it dispatches a submit event on the form.
- We pass the `handleSubmit` function as an `onClick` prop to the 'In Root' button.