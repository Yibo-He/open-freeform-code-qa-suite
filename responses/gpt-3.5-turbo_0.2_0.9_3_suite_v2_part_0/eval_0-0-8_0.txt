Sure, here's one way to implement the `findObject` function in JavaScript:

```javascript
function findObject(id, obj) {
  if (obj.id === id) {
    return obj;
  }
  for (let i = 0; i < obj.child.length; i++) {
    const result = findObject(id, obj.child[i]);
    if (result) {
      return result;
    }
  }
}
```

This function takes two arguments: `id` is the ID of the object you want to find, and `obj` is the current object being searched. The function first checks if the current object's ID matches the ID being searched for. If it does, the function returns the current object.

If the current object's ID does not match, the function loops through each child object and recursively calls itself with the child object as the new `obj` argument. If a child object contains the ID being searched for, the function returns that child object.

To use this function with the example object tree you provided, you would call `findObject("C", objectTree)` where `objectTree` is the variable containing the example object tree.