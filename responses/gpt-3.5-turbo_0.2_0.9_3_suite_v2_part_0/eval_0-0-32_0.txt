To identify if a div is visible on the viewport, you can use the Intersection Observer API. Here's how you can use it in your React code:

1. Install the `react-intersection-observer` package from npm:

   ```
   npm install react-intersection-observer
   ```

2. Import the `IntersectionObserver` component from the package:

   ```javascript
   import { IntersectionObserver } from 'react-intersection-observer';
   ```

3. Wrap your `div` elements with the `IntersectionObserver` component:

   ```javascript
   <div id="parent">
     {data.map(item => (
       <IntersectionObserver>
         {({ inView, ref }) => (
           <div id={item.id} ref={ref}>
             {data.title}
           </div>
         )}
       </IntersectionObserver>
     ))}
   </div>
   ```

4. In the `IntersectionObserver` component, you can access the `inView` property to check if the element is visible on the viewport. You can also use the `ref` property to get a reference to the element and perform any additional actions.

   ```javascript
   <IntersectionObserver>
     {({ inView, ref }) => (
       <div id={item.id} ref={ref}>
         {data.title}
       </div>
     )}
   </IntersectionObserver>
   ```

5. To get a list of all the visible elements on scroll, you can maintain a state variable that stores the IDs of the visible elements. You can update this state variable whenever an element becomes visible or invisible.

   ```javascript
   const [visibleIds, setVisibleIds] = useState([]);

   <IntersectionObserver>
     {({ inView, ref }) => {
       if (inView) {
         setVisibleIds(prevIds => [...prevIds, item.id]);
       } else {
         setVisibleIds(prevIds => prevIds.filter(id => id !== item.id));
       }

       return (
         <div id={item.id} ref={ref}>
           {data.title}
         </div>
       );
     }}
   </IntersectionObserver>
   ```

With this code, you should be able to get a list of all the visible elements on scroll.