Yes, you can use an object to store all the values and update them using a single `changeHandler` function. Here's an example:

```javascript
const [allValues, setAllValues] = useState({
   mobile: '',
   username: '',
   email: '',
   password: '',
   confirmPassword: ''
});

const changeHandler = e => {
  const { name, value } = e.target;
  setAllValues(prevState => ({
    ...prevState,
    [name]: value
  }));
}

return (
   <input type="text"
       className="form-control"
       id="mobile"
       name="mobile"
       placeholder="Enter a valid mobile number"
       onChange={changeHandler}
   />
   // ...
)
```

In the `changeHandler` function, we destructure the `name` and `value` properties from the `e.target` object, which represents the input element that triggered the event. We then use the `setAllValues` function to update the state of the `allValues` object by spreading the previous state and updating the property with the `name` key to the new `value`.