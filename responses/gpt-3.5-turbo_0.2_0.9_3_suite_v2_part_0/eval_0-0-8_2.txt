Sure! Here's a recursive function that will traverse the nested object tree and return the object with the matching `id`:

```javascript
function findObject(id, obj) {
  if (obj.id === id) {
    return obj;
  }
  if (obj.child) {
    for (let i = 0; i < obj.child.length; i++) {
      const result = findObject(id, obj.child[i]);
      if (result) {
        return result;
      }
    }
  }
  return null;
}
```

You can call this function with the `id` you want to search for and the root object of the nested tree:

```javascript
const nestedObject = {
    "id": "A",
    "name": "Item A",
    "child": [
        {
            "id": "B",
            "name": "Item B",
            "child": [
                {
                    "id": "C",
                    "name": "Item C",
                    "child": []
                }
            ]
        },
        {
            "id": "D",
            "name": "Item D",
            "child": []
        }
    ]
};

const result = findObject("C", nestedObject);
console.log(result); // Output: {"id": "C", "name": "Item C", "child": []}
``` 

This function will return the object with the matching `id` or `null` if the object is not found.