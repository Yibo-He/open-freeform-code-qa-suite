Sure, you can use the `random_split` function from PyTorch to split your dataset into training and validation sets. Here is how you can do it:

```python
from torch.utils.data import DataLoader, random_split

# Assuming that dataset is your dataset loaded with CustomDatasetFromCSV
dataset_size = len(dataset)
train_size = int(0.8 * dataset_size)
validation_size = dataset_size - train_size

train_dataset, validation_dataset = random_split(dataset, [train_size, validation_size])

# You can then use DataLoader to handle batching of the data
batch_size = 32  # You can set the batch size according to your need

train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
validation_loader = DataLoader(dataset=validation_dataset, batch_size=batch_size, shuffle=True)
```

In this code, `random_split` function splits the dataset into non-overlapping new datasets of given lengths. The DataLoader then provides an iterator that yields batches of data from the specified dataset. The `shuffle=True` parameter ensures that the data is shuffled at every epoch.