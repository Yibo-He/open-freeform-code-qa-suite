In React Navigation 5, passing non-serializable values as parameters is not recommended and it throws a warning. This is because the parameters could be used as the initial state for the screen when deep linking or on Android if the activity is recreated due to low memory.

To solve your problem, you can use React Context or Redux to share state between screens. But if you want a simpler solution, you can use React Navigation's events system.

Here is an example of how you can do it:

```jsx
// In your parent screen
import { useFocusEffect } from '@react-navigation/native';

useFocusEffect(
  React.useCallback(() => {
    const unsubscribe = navigation.addListener('focus', () => {
      // Do something with the new value
    });

    return unsubscribe;
  }, [navigation])
);

<TouchableOpacity
    style={ styles.countrySelector }
    activeOpacity={ 0.7 }
    onPress={ () => Navigation.navigate("CountrySelect",
        {
             countryCode: this.state.country_code,
        })
    }
>
</TouchableOpacity>
```

```jsx
// In your child screen
_onPress = (country, country_code, calling_code) => {
    const { navigation, route } = this.props;
    navigation.goBack();
    navigation.emit('focus', {
        country_name: country,
        country_code: country_code,
        calling_code: calling_code
    });
};
```

In this example, when the parent screen is focused again, it will receive the new value from the child screen. You can then use this value to update the state of the parent screen.