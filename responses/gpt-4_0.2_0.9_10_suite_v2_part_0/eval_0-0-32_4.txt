You can use the `react-intersection-observer` npm package to achieve this. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from this package in your component:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
  const [ref, inView] = useInView({
    triggerOnce: false, // Change this to true if you want the event to be triggered only once
  });

  const data = ... // your data

  return (
    <div id="parent">
      {data.map(item => {
        const [ref, inView] = useInView({
          triggerOnce: false,
        });

        return (
          <div ref={ref} id={item.id}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {item.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this code, `useInView` returns a `ref` that you can attach to the divs. When a div enters the viewport, `inView` will be `true`, and when it leaves the viewport, `inView` will be `false`.

You can adjust the options passed to `useInView` to change its behavior. For example, you can set `triggerOnce` to `true` if you want the event to be triggered only once when the div enters the viewport. You can also set the `threshold` option to a number between 0 and 1 to change when the event is triggered based on how much of the div is in the viewport.

Please note that the Intersection Observer API is not supported in all browsers. You can check the current browser support on Can I use. If you need to support a browser that doesn't have native support, you can use a polyfill.