You can connect to Heroku Redis using TLS on Node.js by using the `REDIS_TLS_URL` environment variable. This URL contains all the necessary information for connecting to your Redis instance over a secure connection.

Here's a simple example of how to do this using the `node_redis` library:

```javascript
const redis = require('redis');
const url = require('url');

let redisURL = url.parse(process.env.REDIS_TLS_URL);
let client = redis.createClient({
    port: redisURL.port,
    host: redisURL.hostname,
    password: redisURL.auth.split(':')[1],
    tls: {
        rejectUnauthorized: false
    }
});

client.on('connect', function() {
    console.log('Connected to Redis');
});

client.on('error', function(err) {
    console.log('Redis error: ' + err);
});
```

This script will create a new Redis client and connect to the Redis instance specified by the `REDIS_TLS_URL` environment variable. The `tls` option is set to an object with `rejectUnauthorized` set to `false` to allow connections to the Heroku Redis server, which uses a self-signed certificate.

Please note that setting `rejectUnauthorized` to `false` can leave your application vulnerable to man-in-the-middle attacks. It's recommended to use this setting only if you trust the network between your application and the Redis server.

Also, remember to replace `REDIS_TLS_URL` with your actual Redis URL.