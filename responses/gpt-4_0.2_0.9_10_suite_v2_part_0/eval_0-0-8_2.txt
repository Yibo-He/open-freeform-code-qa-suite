Sure, you can use a recursive function to traverse the tree and find the object by its `id`. Here is an example implementation:

```javascript
function findObject(obj, id) {
    if (obj.id === id) {
        return obj;
    } else if (obj.child) {
        var result = null;
        for (var i = 0; result == null && i < obj.child.length; i++) {
            result = findObject(obj.child[i], id);
        }
        return result;
    }
    return null;
}
```

In this function, we first check if the current object's `id` matches the `id` we are looking for. If it does, we return the object. If it doesn't, we recursively call `findObject` on each of the object's children. If a match is found in one of the children, we return it. If no match is found, we return `null`.

You can use this function like this:

```javascript
var tree = {
    "id": "A",
    "name": "Item A",
    "child": [
        {
            "id": "B",
            "name": "Item B",
            "child": [
                {
                    "id": "C",
                    "name": "Item C",
                    "child": []
                }
            ]
        },
        {
            "id": "D",
            "name": "Item D",
            "child": []
        }
    ]
};

console.log(findObject(tree, "C"));
```

This will print:

```javascript
{
  "id": "C",
  "name": "Item C",
  "child": []
}
```