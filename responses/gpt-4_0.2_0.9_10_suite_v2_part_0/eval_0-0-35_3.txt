You should be using `REDIS_TLS_URL` if you want to connect to Heroku Redis using TLS. Here's a simple example of how you can do this using the `node_redis` library:

```javascript
const redis = require('redis');
const url = require('url');

let redisURL = url.parse(process.env.REDIS_TLS_URL);
let client = redis.createClient({
    port: redisURL.port,
    host: redisURL.hostname,
    password: redisURL.auth.split(':')[1],
    tls: {
        rejectUnauthorized: false
    }
});

client.on('connect', function() {
    console.log('Connected to Redis');
});

client.on('error', function(err) {
    console.log('Redis error: ' + err);
});
```

In this example, we're parsing the `REDIS_TLS_URL` environment variable to get the host, port, and password for the Redis server. We're also setting `rejectUnauthorized` to `false` in the `tls` options to allow connections to the server even if it has a self-signed certificate.

Please note that setting `rejectUnauthorized` to `false` can leave you vulnerable to man-in-the-middle attacks, so it's generally not recommended for production use. You should use a trusted certificate in a production environment.

Also, remember to replace `REDIS_TLS_URL` with your actual Redis URL.