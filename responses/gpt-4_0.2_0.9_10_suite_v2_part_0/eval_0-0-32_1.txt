You can use the `react-intersection-observer` npm package to detect if an element is in the viewport. 

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package to detect if an element is in the viewport.

Here is how you can modify your code:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
    const [ref, inView] = useInView({
        triggerOnce: false, // Change this to true if you want the event to trigger only once
    });

    return (
        <div id="parent">
            {data.map(item => {
                const [ref, inView] = useInView({
                    triggerOnce: false,
                });

                return (
                    <div ref={ref} id={item.id}>
                        {inView ? 'In viewport' : 'Not in viewport'}
                        {data.title}
                    </div>
                );
            })}
        </div>
    );
};

export default MyComponent;
```

In this code, `useInView` returns a `ref` and a boolean `inView`. You attach the `ref` to the element you want to observe, and `inView` will be `true` if the element is in the viewport, and `false` otherwise.

Please note that the Intersection Observer API is not supported in all browsers. You can check the current browser compatibility on [Can I use](https://caniuse.com/intersectionobserver). For unsupported browsers, you might want to use a polyfill.