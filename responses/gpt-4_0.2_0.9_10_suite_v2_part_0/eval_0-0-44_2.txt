The `index` option in the `@Prop()` decorator should work, but the index creation is not immediate. Mongoose will not create the index until the model is compiled and an operation is executed on the model.

If you want to ensure that the indexes are created, you can use the `Model.ensureIndexes()` function. This function tells Mongoose to push the index creation to MongoDB immediately.

Here is how you can use it:

```javascript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';

@Injectable()
export class MyService implements OnModuleInit {
  constructor(@InjectModel(Schema.name) private readonly myModel: Model<Schema>) {}

  async onModuleInit() {
    await this.myModel.init();
    await this.myModel.ensureIndexes(); // this will ensure the index is created
  }
}
```

In this example, `MyService` implements `OnModuleInit` lifecycle hook, and `onModuleInit` method will be called when the module has been initialized. In this method, we ensure that the indexes are created.

Remember to replace `Schema` and `MyService` with your actual schema and service names.

Also, please note that creating indexes can be a heavy operation for MongoDB, especially on large collections, so it's not recommended to run `ensureIndexes` in production. Instead, it's better to handle index creation as part of a database migration strategy.