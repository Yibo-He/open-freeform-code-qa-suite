You can use the `react-intersection-observer` npm package to detect if a div is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package in your component:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
  const [ref, inView] = useInView({
    triggerOnce: false, // Change this to true if you want the event to trigger only once
  });

  return (
    <div id="parent">
      {data.map((item) => {
        const [refItem, inViewItem] = useInView({
          triggerOnce: false,
        });

        return (
          <div ref={refItem} id={item.id}>
            {inViewItem ? 'In viewport' : 'Not in viewport'}
            {item.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In the above code, `useInView` returns a `ref` and a boolean `inView`. You assign the `ref` to the div you want to observe, and `inView` will be `true` if the div is in the viewport, and `false` otherwise.

Please note that the Intersection Observer API is not supported in all browsers, so you might need to use a polyfill for full compatibility. You can install it with:

```bash
npm install intersection-observer
```

And import it in your project:

```javascript
import 'intersection-observer'
```

This should be done before you use `react-intersection-observer`.