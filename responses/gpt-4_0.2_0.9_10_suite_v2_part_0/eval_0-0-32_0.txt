You can use the `react-intersection-observer` npm package to achieve this. This package provides a set of React components that use the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package using npm:

```bash
npm install react-intersection-observer
```

Then, you can use the `InView` component from the package to wrap each of your divs. The `InView` component will call a function whenever the div enters or leaves the viewport.

Here's how you can modify your code to use `react-intersection-observer`:

```javascript
import React from 'react';
import { InView } from 'react-intersection-observer';

const YourComponent = () => {
    const data = ... // your data

    return (
        <div id="parent">
            {data.map(item => (
                <InView as="div" id={item.id} onChange={(inView, entry) => {
                    if(inView){
                        console.log(`${item.id} is in viewport`);
                    }
                }}>
                    {item.title}
                </InView>
            ))}
        </div>
    );
};

export default YourComponent;
```

In this code, the `InView` component wraps each div. The `onChange` prop is a function that gets called whenever the div enters or leaves the viewport. The `inView` parameter is a boolean that tells you whether the div is in the viewport or not.

Note: The Intersection Observer API is not supported in all browsers. If you need to support older browsers, you may need to use a polyfill.