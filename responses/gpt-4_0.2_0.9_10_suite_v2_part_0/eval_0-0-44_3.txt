In Nest.js, you can use the `@Index()` decorator from the `@nestjs/mongoose` package to create an index on a property in your Mongoose schema.

Here is how you can do it:

```javascript
import { Prop, Schema, SchemaFactory, Index } from '@nestjs/mongoose';
import { Document } from 'mongoose';

@Schema()
@Index({ type: 1 }) // This is where you define your index
export class MySchema extends Document {

  @Prop()
  _id: string;

  @Prop({required: true})
  type: string;

  @Prop()
  creationDate: string;

  @Prop()
  name: string;
}

export const MySchemaModel = SchemaFactory.createForClass(MySchema);
```

In this example, an index is created on the `type` field. The `1` in `{ type: 1 }` means that the index is in ascending order. If you want it in descending order, you can use `-1` instead.

Remember that the index creation is an asynchronous operation. Mongoose will not throw an error if you try to insert a document before the index is finished building. So, make sure to handle this in your application logic.

Also, note that creating indexes can cause a significant performance impact, especially on large collections. So, it's recommended to create indexes during a maintenance window or during a period of low usage.