You can use the `react-intersection-observer` npm package to detect if an element is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package in your component:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
  const [ref, inView] = useInView({
    triggerOnce: false, // Change this to true if you want the event to trigger only once
  });

  return (
    <div id="parent">
      {data.map(item => {
        const [ref, inView] = useInView({
          triggerOnce: false,
        });

        return (
          <div id={item.id} ref={ref}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {item.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this example, `useInView` returns a `ref` that you can attach to the divs. When a div enters or leaves the viewport, `inView` will be updated accordingly. You can use this to conditionally render different content based on whether the div is in the viewport.

Please note that the Intersection Observer API is not supported in all browsers. You may need to use a polyfill for full compatibility.