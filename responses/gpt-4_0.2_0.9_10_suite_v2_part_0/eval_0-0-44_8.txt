In Nest.js, you can use the `@Index()` decorator from the `@nestjs/mongoose` package to create an index on a property in a Mongoose schema. 

Here is how you can do it:

```javascript
import { Prop, Schema, SchemaFactory, Index } from '@nestjs/mongoose';
import { Document } from 'mongoose';

@Schema()
@Index({ type: 1 }) // This is where you define the index
export class MySchema extends Document {

  @Prop()
  _id: string;

  @Prop({required: true})
  type: string;

  @Prop()
  creationDate: string;

  @Prop()
  name: string;
}

export const MySchemaModel = SchemaFactory.createForClass(MySchema);
```

In the above code, `@Index({ type: 1 })` creates an ascending index on the `type` field. If you want to create a descending index, you can use `-1` instead of `1`.

Also, make sure that you are using the latest version of `@nestjs/mongoose`.

After defining the schema, you need to use it in a module:

```javascript
@Module({
  imports: [
    MongooseModule.forFeatureAsync([
      {
        name: MySchema.name,
        useFactory: () => {
          const schema = MySchemaModel;
          schema.index({ type: 1 });
          return schema;
        },
      },
    ]),
  ],
})
export class MyModule {}
```

In the above code, `MongooseModule.forFeatureAsync()` method is used to create indexes asynchronously. The `useFactory` function returns the schema with the defined index.

Please note that indexes are created in the background by MongoDB and it may take some time for the index to be created if you have a large amount of data in your collection. You can check if the index is created using the `getIndexes()` method in MongoDB shell.