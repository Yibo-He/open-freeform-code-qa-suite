You can use the `react-intersection-observer` npm package to detect if an element is in the viewport. This package uses the Intersection Observer API which provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.

First, install the package using npm:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from `react-intersection-observer` to track the visibility of each div. Here is an example:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = ({ data }) => {
    const [ref, inView] = useInView({
        triggerOnce: false, // Change this to true if you want the observer to trigger once.
    });

    return (
        <div id="parent">
            {data.map(item => {
                const [ref, inView] = useInView({
                    triggerOnce: false,
                });

                return (
                    <div id={item.id} ref={ref}>
                        {inView ? 'In viewport' : 'Not in viewport'}
                        {item.title}
                    </div>
                );
            })}
        </div>
    );
};

export default MyComponent;
```

In this code, `useInView` returns a `ref` that you can attach to your divs. It also returns `inView`, a boolean that is `true` when the div is in the viewport and `false` otherwise. You can use this boolean to conditionally render different content based on whether the div is in the viewport.

Please note that the Intersection Observer API is not supported in all browsers. If you need to support a browser that does not have native support for the Intersection Observer API, you will need to install a polyfill. You can do this by running `npm install intersection-observer` and then importing it in your project with `import 'intersection-observer'`.