Sure, here is a generator function that should do what you're asking for:

```javascript
function* iterLeafNodes(strHTML, format=[]) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(strHTML, 'text/html');
  const walk = function* (node, format) {
    if (node.nodeType === Node.TEXT_NODE) {
      yield { text: node.nodeValue, format };
    } else if (node.nodeType === Node.ELEMENT_NODE) {
      format = [...format];
      if (node.tagName !== 'P') {
        format.push(node.tagName.toLowerCase());
      }
      for (const child of node.childNodes) {
        yield* walk(child, format);
      }
    }
  };
  for (const child of doc.body.childNodes) {
    yield* walk(child, format);
  }
}
```

This function uses a recursive generator function `walk` to traverse the DOM tree. It checks the type of each node and if it's a text node, it yields an object with the text and the current format. If it's an element node, it adds the tag name to the format (unless it's a 'P' tag) and then recursively walks the child nodes.