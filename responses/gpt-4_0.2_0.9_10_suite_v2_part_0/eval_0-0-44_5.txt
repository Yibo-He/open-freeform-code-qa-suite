To create an index in Mongoose schema using Nest.js, you can use the `@Prop()` decorator with the `index` option set to `true` as you did. However, you need to ensure that the index is actually being created in the database. 

To do this, you can use the `syncIndexes()` method from Mongoose. This method will compare the indexes defined in your schema with the ones currently in the database, and make any necessary changes to bring them into sync.

Here is how you can do it:

```javascript
import { Injectable, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';

@Injectable()
export class YourService implements OnModuleInit {
  constructor(@InjectModel(Schema.name) private readonly model: Model<Schema>) {}

  async onModuleInit(): Promise<void> {
    await this.model.syncIndexes();
  }
}
```

In this example, `YourService` implements the `OnModuleInit` interface, which means it has a method `onModuleInit` that will be called when the Nest.js module containing this service is fully initialized. In this method, we call `syncIndexes` on the Mongoose model, which will ensure that the indexes defined in the schema are actually created in the database.

Remember to replace `YourService` and `Schema` with your actual service and schema names.