You can use the `REDIS_TLS_URL` environment variable to connect to Heroku Redis using TLS. Here is a working example using `node_redis` v3:

```javascript
const redis = require('redis');
const url = require('url');

const redisURL = url.parse(process.env.REDIS_TLS_URL);
const client = redis.createClient({
    url: redisURL,
    tls: {
        rejectUnauthorized: false,
    },
});

client.on('connect', function() {
    console.log('Connected to Redis');
});

client.on('error', function(err) {
    console.log('Redis error: ' + err);
});
```

In this example, we're using the `url` module to parse the `REDIS_TLS_URL` environment variable. We then pass this URL to `redis.createClient()`, along with a `tls` object. The `rejectUnauthorized: false` option is used to allow connections to Heroku Redis, which uses self-signed certificates.

Please note that setting `rejectUnauthorized: false` can leave your application vulnerable to man-in-the-middle attacks. In a production environment, you should use a more secure method to verify the server's identity.

Also, remember to replace `REDIS_TLS_URL` with your actual Redis URL. You can find this in your Heroku dashboard under the "Settings" tab of your Redis addon.