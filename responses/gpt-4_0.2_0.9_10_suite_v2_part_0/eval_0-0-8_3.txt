Sure, you can use a recursive function to traverse the nested object tree. Here is an example of how you can implement this:

```javascript
function findObject(obj, id) {
    if (obj.id === id) {
        return obj;
    } else if (obj.child) {
        var result = null;
        for (var i = 0; result == null && i < obj.child.length; i++) {
            result = findObject(obj.child[i], id);
        }
        return result;
    }
    return null;
}
```

In this function, we first check if the `id` of the current object (`obj`) is the `id` we are looking for. If it is, we return the object. If it's not, we check if the object has a `child` property. If it does, we recursively call `findObject` on each child until we find the object we're looking for or we've checked all children. If we find the object, we return it. If we don't find it after checking all children, we return `null`.

You can call this function like this:

```javascript
var obj = {
    "id": "A",
    "name": "Item A",
    "child": [
        {
            "id": "B",
            "name": "Item B",
            "child": [
                {
                    "id": "C",
                    "name": "Item C",
                    "child": []
                }
            ]
        },
        {
            "id": "D",
            "name": "Item D",
            "child": []
        }
    ]
};

console.log(findObject(obj, "C"));
```

This will output:

```javascript
{
  "id": "C",
  "name": "Item C",
  "child": []
}
```