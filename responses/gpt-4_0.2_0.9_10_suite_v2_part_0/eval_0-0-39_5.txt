Yes, you can accomplish this by using the `ref` attribute in React to create a reference to the form, and then use this reference to submit the form when the 'In Root' button is clicked. Here's how you can do it:

```javascript
import React, { Component, createRef } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  formRef = createRef(); // Create a reference to the form

  submitForm = () => {
    if (this.formRef.current) {
      this.formRef.current.dispatchEvent(new Event('submit', { cancelable: true }));
    }
  }

  render() {
    return (
      <form id='my-form' onSubmit={(e) => {e.preventDefault(); alert('Form submitted!')}} ref={this.formRef}>
        <button type='submit'>Inside Custom</button>
      </form>
    );
  }
}

function App() {
  const customFormRef = createRef(); // Create a reference to the CustomForm component

  const submitForm = () => {
    if (customFormRef.current) {
      customFormRef.current.submitForm();
    }
  }

  return (
    <div>
      <CustomForm ref={customFormRef} />
      <button onClick={submitForm}>In Root</button>
    </div>
  );
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In this code, we're creating a reference to the form in the `CustomForm` component using `createRef()`, and then using this reference to submit the form in the `submitForm` method. We're also creating a reference to the `CustomForm` component in the `App` component, and using this reference to call the `submitForm` method when the 'In Root' button is clicked.