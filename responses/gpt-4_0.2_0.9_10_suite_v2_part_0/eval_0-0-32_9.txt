You can use the `react-intersection-observer` npm package to detect if an element is in the viewport. This package uses the Intersection Observer API to tell you when an element enters or leaves the viewport.

First, install the package:

```bash
npm install react-intersection-observer
```

Then, you can use the `useInView` hook from the package in your component:

```javascript
import React from 'react';
import { useInView } from 'react-intersection-observer';

const MyComponent = () => {
  const [ref, inView] = useInView({
    triggerOnce: false, // Change this to true if you want the item to stay in state once passed over
  });

  return (
    <div id="parent">
      {data.map((item) => {
        const [ref, inView] = useInView({
          triggerOnce: false,
        });

        return (
          <div ref={ref} id={item.id}>
            {inView ? 'In viewport' : 'Not in viewport'}
            {data.title}
          </div>
        );
      })}
    </div>
  );
};

export default MyComponent;
```

In this code, `useInView` returns a `ref` that you can attach to the divs. When a div is in the viewport, `inView` will be `true`. You can use this to conditionally render something based on whether the div is in the viewport.

Please note that the Intersection Observer API is not supported in all browsers. You can check the compatibility table on the MDN web docs. If you need to support browsers that don't have the Intersection Observer API, you might need to use a polyfill.