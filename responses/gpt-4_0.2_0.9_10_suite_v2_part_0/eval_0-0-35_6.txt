You can connect to Heroku Redis using TLS on Node.js by using the `REDIS_TLS_URL` environment variable. This URL contains all the necessary information to connect to the Redis instance, including the host, port, password, and whether to use TLS.

Here's a simple example using the `node_redis` library:

```javascript
const redis = require('redis');
const url = require('url');

let redisURL = url.parse(process.env.REDIS_TLS_URL);
let client = redis.createClient({
    port: redisURL.port,
    host: redisURL.hostname,
    password: redisURL.auth.split(":")[1],
    tls: {
        rejectUnauthorized: false
    }
});

client.on('connect', function() {
    console.log('Connected to Redis');
});

client.on('error', function(err) {
    console.log('Redis error: ' + err);
});
```

In this example, we're parsing the `REDIS_TLS_URL` environment variable to get the host, port, and password. We're also setting `rejectUnauthorized` to `false` in the `tls` options to allow connections to the Redis server even if the server's certificate is not trusted.

Please note that setting `rejectUnauthorized` to `false` is not recommended for production environments as it disables certain security checks. You should only use it for testing purposes or if you're sure that your Redis server's certificate can be trusted.

Also, make sure that you have the `REDIS_TLS_URL` environment variable set in your Heroku app's settings. You can do this by going to the "Settings" tab of your app in the Heroku dashboard, clicking on "Reveal Config Vars", and then adding a new config var with the name `REDIS_TLS_URL` and the value of your Redis server's TLS URL.