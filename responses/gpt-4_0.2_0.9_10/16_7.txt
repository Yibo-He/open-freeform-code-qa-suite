To generate a REST client using Swagger Codegen, follow these steps:

1. **Install Swagger Codegen**: First, you need to install Swagger Codegen. You can download the latest version from the [Swagger Codegen GitHub repository](https://github.com/swagger-api/swagger-codegen). You can either build it from source or download the pre-built JAR file.

2. **Obtain the Swagger/OpenAPI Specification**: You need to have the Swagger/OpenAPI specification file (in JSON or YAML format) for your REST server. This file describes the API endpoints, request/response formats, and other details. If you don't have it, you can generate it using tools like [Swagger Inspector](https://swagger.io/tools/swagger-inspector/) or [Swagger UI](https://swagger.io/tools/swagger-ui/).

3. **Choose a target language**: Decide the programming language for your REST client. Swagger Codegen supports many languages, including Java, Python, Ruby, PHP, and more. You can find the full list of supported languages in the [Swagger Codegen documentation](https://github.com/swagger-api/swagger-codegen#overview).

4. **Generate the REST client**: Run the Swagger Codegen command to generate the REST client. Replace `<specification_file>` with the path to your Swagger/OpenAPI specification file, `<language>` with the target language, and `<output_directory>` with the desired output directory.

   ```
   java -jar swagger-codegen-cli.jar generate -i <specification_file> -l <language> -o <output_directory>
   ```

   For example, to generate a Python REST client:

   ```
   java -jar swagger-codegen-cli.jar generate -i my_api.yaml -l python -o my_python_client
   ```

5. **Use the generated REST client**: The generated client will be in the specified output directory. You can now use it in your application to interact with the REST server.

Here's an example of how to use the generated Python client:

```python
from my_python_client import ApiClient, Configuration
from my_python_client.api import MyApi

config = Configuration()
config.host = "http://localhost:8080"
client = ApiClient(config)

my_api = MyApi(client)
response = my_api.get_some_data()
print(response)
```

Replace `MyApi` with the appropriate API class generated by Swagger Codegen, and `get_some_data` with the appropriate API method.