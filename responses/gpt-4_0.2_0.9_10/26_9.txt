The problem is that the `setup` function is only called once when the component is created. So, when the route changes, the `setup` function is not called again and the user is not updated.

To solve this, you can use a `watch` function to observe changes in the route parameters and update the user accordingly. Here is how you can do it:

```vue
<template>
  <div>{{username}}</div>
</template>

<script lang="ts">
import { computed, defineComponent, ref, getCurrentInstance, watch } from '@vue/composition-api';

export const useUsername = ({ user }) => {
  return { username: user.name };
};

export default defineComponent({
  setup(props, { root }) {
    const vm = getCurrentInstance();

    const userToLoad = computed(() => root.$route.params.userId);
    const listOfUsers = [
      { userId: 1, name: 'user1' },
      { userId: 2, name: 'user2' },
    ];

    const user = ref(listOfUsers.find((u) => u.userId === +userToLoad.value));
    if (!user.value) {
      return root.$router.push('/404');
    }

    const { username } = useUsername({ user: user.value });

    // Watch for changes in the route params
    watch(userToLoad, (newUserId) => {
      const newUser = listOfUsers.find((u) => u.userId === +newUserId);
      if (!newUser) {
        root.$router.push('/404');
      } else {
        user.value = newUser;
        const { username } = useUsername({ user: user.value });
      }
    });

    return { username };
  },
});
</script>
```

In this code, a `watch` function is used to observe changes in the `userToLoad` computed property. When the `userId` in the route parameters changes, the `watch` function is triggered, and it updates the `user` and `username` accordingly. If the new `userId` is not found in the `listOfUsers`, it redirects to the 404 page.