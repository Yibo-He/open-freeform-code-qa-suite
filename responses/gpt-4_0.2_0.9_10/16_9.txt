To generate a REST client using Swagger Codegen, follow these steps:

1. **Install Swagger Codegen**: First, you need to install Swagger Codegen. You can download the latest version from the [Swagger Codegen GitHub repository](https://github.com/swagger-api/swagger-codegen). You can also install it using package managers like npm, Homebrew, or Docker. For example, to install using npm, run:

   ```
   npm install -g swagger-codegen
   ```

2. **Obtain the Swagger/OpenAPI specification**: You need to have the Swagger/OpenAPI specification file (in JSON or YAML format) for your REST server. This file describes the API endpoints, request/response formats, and other details. You can either create this file manually or generate it automatically using tools like [Swagger Inspector](https://swagger.io/tools/swagger-inspector/) or [Swagger UI](https://swagger.io/tools/swagger-ui/).

3. **Generate the REST client**: Once you have the Swagger/OpenAPI specification file, you can generate the REST client using the `swagger-codegen` command. The basic syntax is:

   ```
   swagger-codegen generate -i <input-specification-file> -l <language> -o <output-directory>
   ```

   Replace `<input-specification-file>` with the path to your Swagger/OpenAPI specification file, `<language>` with the programming language you want to generate the client in (e.g., `java`, `python`, `javascript`, etc.), and `<output-directory>` with the directory where you want to save the generated client code.

   For example, to generate a Python REST client, you can run:

   ```
   swagger-codegen generate -i my_api_spec.yaml -l python -o my_python_client
   ```

4. **Use the generated client**: After generating the REST client, you can use it in your application by importing the necessary modules and classes. The generated client will include instructions on how to use it, such as authentication, making API calls, and handling responses.

That's it! You've successfully generated a REST client using Swagger Codegen.