To generate a REST client using Swagger Codegen, follow these steps:

1. **Install Swagger Codegen**: First, you need to install Swagger Codegen. You can download the latest version from the [Swagger Codegen GitHub repository](https://github.com/swagger-api/swagger-codegen). You can also install it using package managers like npm, Homebrew, or Docker. For example, to install using npm, run:

   ```
   npm install -g swagger-codegen
   ```

2. **Obtain the Swagger/OpenAPI Specification**: You need the Swagger/OpenAPI specification file (in JSON or YAML format) for your REST server. This file describes the API endpoints, request/response models, and other details. You can either create this file manually or use tools like [Swagger Inspector](https://swagger.io/tools/swagger-inspector/) or [Swagger UI](https://swagger.io/tools/swagger-ui/) to generate it from your existing REST server.

3. **Generate the REST Client**: Once you have the Swagger/OpenAPI specification file, you can use Swagger Codegen to generate the REST client in your desired programming language. Run the following command:

   ```
   swagger-codegen generate -i /path/to/swagger-specification.yaml -l <language> -o /path/to/output/directory
   ```

   Replace `/path/to/swagger-specification.yaml` with the path to your Swagger/OpenAPI specification file, `<language>` with the programming language you want to generate the client in (e.g., `java`, `python`, `javascript`, etc.), and `/path/to/output/directory` with the directory where you want to save the generated client code.

   For example, to generate a Python client, run:

   ```
   swagger-codegen generate -i /path/to/swagger-specification.yaml -l python -o /path/to/output/directory
   ```

4. **Use the Generated REST Client**: After generating the REST client, you can import it into your project and use it to interact with your REST server. The generated client code will include classes and methods for each API endpoint, making it easy to call the REST server from your application.

For more information and a list of supported languages, refer to the [Swagger Codegen documentation](https://github.com/swagger-api/swagger-codegen#overview).