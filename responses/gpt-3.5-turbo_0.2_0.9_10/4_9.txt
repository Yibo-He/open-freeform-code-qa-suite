Sure! Here's the code to split the dataset into training and validation sets with no overlap:

```
from torch.utils.data import DataLoader, SubsetRandomSampler

# Set the split ratio
split_ratio = 0.8

# Get the number of samples in the dataset
dataset_size = len(dataset)

# Split the dataset into training and validation sets
indices = list(range(dataset_size))
split = int(np.floor(split_ratio * dataset_size))
np.random.shuffle(indices)
train_indices, val_indices = indices[:split], indices[split:]

# Define samplers for obtaining training and validation batches
train_sampler = SubsetRandomSampler(train_indices)
val_sampler = SubsetRandomSampler(val_indices)

# Define data loaders for training and validation sets
train_loader = DataLoader(dataset, batch_size=32, sampler=train_sampler)
validation_loader = DataLoader(dataset, batch_size=32, sampler=val_sampler)
```

You can adjust the `batch_size` parameter in the `DataLoader` constructor to your desired batch size.