Sure! Here's the code to split the dataset into training and validation sets:

```
from torch.utils.data import DataLoader, SubsetRandomSampler

# Set seed for reproducibility
np.random.seed(42)

# Split dataset into training and validation sets
dataset_size = len(dataset)
indices = list(range(dataset_size))
split = int(np.floor(0.2 * dataset_size))
np.random.shuffle(indices)
train_indices, val_indices = indices[split:], indices[:split]

# Define samplers for obtaining training and validation batches
train_sampler = SubsetRandomSampler(train_indices)
val_sampler = SubsetRandomSampler(val_indices)

# Define data loaders for training and validation sets
train_loader = DataLoader(dataset, batch_size=32, sampler=train_sampler)
validation_loader = DataLoader(dataset, batch_size=32, sampler=val_sampler)
```

This code uses the `SubsetRandomSampler` class from PyTorch to randomly split the dataset into training and validation sets. The `train_indices` and `val_indices` variables contain the indices of the samples in the training and validation sets, respectively. These indices are used to create `SubsetRandomSampler` objects, which are then passed to the `DataLoader` class to create data loaders for the training and validation sets. The `batch_size` argument specifies the number of samples to include in each batch.