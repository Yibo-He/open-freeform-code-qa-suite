Yes, there are official guidelines for naming getters and setters in Java 14 records. According to the Java Language Specification, the naming convention for record components (fields) is to use lowerCamelCase. The naming convention for accessor methods (getters) is to use the same name as the component, but with an initial lowercase letter. For example, if you have a record component named "firstName", the corresponding accessor method should be named "firstName()".

However, if you are working with legacy code that follows the JavaBean convention, it may be necessary to continue using the "get" prefix for accessor methods. In this case, you can use the @java.beans.ConstructorProperties annotation to specify the names of the constructor parameters, which will be used to generate the accessor methods. For example:

```
public record Person(String firstName, String lastName) {
    @java.beans.ConstructorProperties({"firstName", "lastName"})
    public Person {
        // constructor body
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }
}
```

This code defines a record named "Person" with two components, "firstName" and "lastName". The @java.beans.ConstructorProperties annotation specifies that the constructor parameters should be named "firstName" and "lastName", which will be used to generate the accessor methods. The code also includes explicit getter methods that follow the JavaBean convention.

In general, it is recommended to use the new record feature and follow the naming convention for accessor methods as specified in the Java Language Specification. However, if you need to work with legacy code that follows