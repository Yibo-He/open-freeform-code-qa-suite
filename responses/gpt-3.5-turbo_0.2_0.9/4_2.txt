Sure! Here's the code to split the dataset into training and validation sets:

```
from torch.utils.data import DataLoader, SubsetRandomSampler

# Set seed for reproducibility
np.random.seed(42)

# Split dataset into training and validation sets
dataset_size = len(dataset)
indices = list(range(dataset_size))
split = int(np.floor(0.2 * dataset_size))
np.random.shuffle(indices)
train_indices, val_indices = indices[split:], indices[:split]

# Define samplers for obtaining training and validation batches
train_sampler = SubsetRandomSampler(train_indices)
val_sampler = SubsetRandomSampler(val_indices)

# Define data loaders for training and validation sets
train_loader = DataLoader(dataset, batch_size=64, sampler=train_sampler)
validation_loader = DataLoader(dataset, batch_size=64, sampler=val_sampler)
```

You can adjust the batch size as per your requirements. The `SubsetRandomSampler` is used to randomly sample elements from the dataset without replacement. The `train_sampler` and `val_sampler` are used to obtain batches of training and validation data respectively.