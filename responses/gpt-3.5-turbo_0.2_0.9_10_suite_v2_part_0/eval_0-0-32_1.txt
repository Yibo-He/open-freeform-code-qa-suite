To identify if a div is visible on the viewport on scroll, you can use the `Intersection Observer API`. This API allows you to observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.

Here's an example of how you can use the `Intersection Observer API` to get the list of divs inside of `#parent` which are visible on viewport on scroll:

```javascript
import React, { useEffect, useRef, useState } from "react";

const MyComponent = ({ data }) => {
  const [visibleDivs, setVisibleDivs] = useState([]);
  const parentRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        const visibleIds = entries
          .filter((entry) => entry.isIntersecting)
          .map((entry) => entry.target.id);
        setVisibleDivs(visibleIds);
      },
      { rootMargin: "0px", threshold: 1.0 }
    );

    const divs = parentRef.current.querySelectorAll("div");
    divs.forEach((div) => observer.observe(div));

    return () => {
      divs.forEach((div) => observer.unobserve(div));
    };
  }, [data]);

  return (
    <div id="parent" ref={parentRef}>
      {data.map((item) => (
        <div key={item.id} id={item.id}>
          {item.title}
        </div>
      ))}
    </div>
  );
};
```

In this example, we create a state `visibleDivs` to store the list of visible divs. We also create a `useRef` to get a reference to the parent div. In the `useEffect` hook, we create a new `IntersectionObserver` and observe all the child divs of the parent div. Whenever the intersection of a child div with the viewport changes, the observer callback is called with an array of `IntersectionObserverEntry` objects. We filter out the entries that are intersecting and extract their `id` attributes to update the `visibleDivs` state. Finally, we return a cleanup function to unobserve all the child divs when the component unmounts.

You don't need any external npm modules to use the `Intersection Observer API`. It's a built-in API in modern browsers.