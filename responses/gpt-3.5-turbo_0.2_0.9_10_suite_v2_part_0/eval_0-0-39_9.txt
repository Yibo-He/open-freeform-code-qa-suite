Yes, you can achieve this by using `ref` to create a reference to the form in the `CustomForm` component, and then passing that reference to the parent component using a prop. Here's an updated code snippet that demonstrates this:

```javascript
import React, { Component } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  formRef = React.createRef();

  render() {
    return (
      <form ref={this.formRef}>
        <button type='submit'>Inside Custom</button>
      </form>
    );
  }
}

function App() {
  const formRef = React.createRef();

  const handleSubmit = (event) => {
    event.preventDefault();
    formRef.current.submit();
  };

  return (
    <div>
      <CustomForm ref={formRef} />
      <button onClick={handleSubmit}>In Root</button>
    </div>
  );
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In this updated code, we create a `formRef` using `React.createRef()` in the `CustomForm` component, and attach it to the `form` element using the `ref` attribute. Then, in the `App` component, we create another `formRef` and pass it to the `CustomForm` component as a prop. Finally, we define a `handleSubmit` function that prevents the default form submission behavior, and instead calls the `submit()` method on the `formRef` when the 'In Root' button is clicked.