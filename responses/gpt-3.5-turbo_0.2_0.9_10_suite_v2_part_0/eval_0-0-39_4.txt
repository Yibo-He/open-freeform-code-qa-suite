Yes, you can achieve this by using refs in React. You can create a ref in the parent component and pass it down to the child component as a prop. Then, you can attach an onClick event handler to the button in the parent component, which will call the submit method of the form using the ref.

Here's an updated version of your code that implements this approach:

```javascript
import React, { Component } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  render() {
    return (
      <form id='my-form' onSubmit={alert('Form submitted!')}>
        <button type='submit'>Inside Custom</button>
      </form>
    );
  }
}

class App extends Component {
  constructor(props) {
    super(props);
    this.formRef = React.createRef();
  }

  handleSubmit = () => {
    this.formRef.current.submit();
  }

  render() {
    return (
      <div>
        <CustomForm ref={this.formRef} />
        <button onClick={this.handleSubmit}>In Root</button>
      </div>
    );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In this updated code, we create a ref using `React.createRef()` in the constructor of the parent component `App`. We then pass this ref down to the `CustomForm` component as a prop named `ref`. In the `handleSubmit` method of the parent component, we call the `submit` method of the form using the ref. Finally, we attach an `onClick` event handler to the 'In Root' button, which calls the `handleSubmit` method when clicked.