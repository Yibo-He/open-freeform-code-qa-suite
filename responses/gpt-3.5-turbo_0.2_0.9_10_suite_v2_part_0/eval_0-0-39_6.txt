Yes, you can achieve this by using refs in React. You can create a ref in the parent component and pass it down to the child component as a prop. Then, in the child component, you can attach the ref to the form element. Finally, in the parent component, you can add an onClick event to the 'In Root' button that triggers the form submission using the ref.

Here's an example implementation:

```javascript
import React, { Component } from "react";
import ReactDOM from "react-dom";

class CustomForm extends Component {
  render() {
    return (
      <form ref={this.props.formRef} id='my-form' onSubmit={() => alert('Form submitted!')}>
        <button type='submit'>Inside Custom</button>
      </form>
    );
  }
}

class App extends Component {
  constructor(props) {
    super(props);
    this.formRef = React.createRef();
  }

  handleSubmit = () => {
    this.formRef.current.submit();
  }

  render() {
    return (
      <div>
        <CustomForm formRef={this.formRef} />
        <button onClick={this.handleSubmit}>In Root</button>
      </div>
    );
  }
}

const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);
```

In this example, we create a ref using `React.createRef()` in the parent component's constructor. We then pass this ref down to the child component as a prop called `formRef`. In the child component, we attach the ref to the form element using `ref={this.props.formRef}`.

In the parent component, we define a method called `handleSubmit` that triggers the form submission using `this.formRef.current.submit()`. We then attach this method to the 'In Root' button using `onClick={this.handleSubmit}`.