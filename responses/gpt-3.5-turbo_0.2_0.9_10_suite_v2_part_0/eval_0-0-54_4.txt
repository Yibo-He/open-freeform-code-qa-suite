Sure, you can create a function that will be called on button click and get the values of the input fields using the `useState` hook. Here's an example:

```javascript
import React, { useState } from 'react';

export default function InputField({ name, label }) {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');

  const handleClick = () => {
    console.log('First Name:', firstName);
    console.log('Last Name:', lastName);
  };

  return (
    <div>
      <label>{label}</label>
      <input
        type="text"
        value={firstName}
        name={`${name}-firstName`}
        onChange={(e) => setFirstName(e.target.value)}
      />
      <input
        type="text"
        value={lastName}
        name={`${name}-lastName`}
        onChange={(e) => setLastName(e.target.value)}
      />
      <button onClick={handleClick}>Submit</button>
    </div>
  );
}
```

In this example, we have created two state variables `firstName` and `lastName` using the `useState` hook. We have also created a function `handleClick` that will be called on button click. Inside this function, we are logging the values of the input fields to the console.

To get the values of the input fields, we have used the `value` attribute of the input fields and passed the `onChange` function to update the state variables. We have also added a `name` attribute to the input fields to differentiate between them.