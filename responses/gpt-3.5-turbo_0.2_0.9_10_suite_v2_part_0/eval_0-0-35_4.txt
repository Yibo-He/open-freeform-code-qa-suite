To connect to Heroku Redis using TLS on Node, you should use the `REDIS_TLS_URL` environment variable instead of `REDIS_URL`. Here's an example of how to connect to Heroku Redis using node_redis v3:

```javascript
const redis = require('redis');
const url = require('url');

// Parse the REDIS_TLS_URL environment variable
const redisUrl = url.parse(process.env.REDIS_TLS_URL);

// Create a Redis client with TLS options
const client = redis.createClient(redisUrl.port, redisUrl.hostname, {
  tls: {
    rejectUnauthorized: false // Set to true if using a custom CA certificate
  }
});

// Authenticate with Redis if necessary
if (redisUrl.auth) {
  const [username, password] = redisUrl.auth.split(':');
  client.auth(password);
}

// Use the Redis client as usual
client.set('key', 'value', (err, reply) => {
  if (err) throw err;
  console.log(reply);
});
```

Note that the `rejectUnauthorized` option is set to `false` in this example, which disables certificate validation. This is not recommended for production use, as it leaves your connection vulnerable to man-in-the-middle attacks. Instead, you should use a custom CA certificate to validate the server's identity.