To identify if a div is visible on the viewport, you can use the Intersection Observer API. Here's an example of how you can use it:

```javascript
import React, { useRef, useEffect, useState } from "react";

const ParentComponent = ({ data }) => {
  const parentRef = useRef(null);
  const [visibleDivs, setVisibleDivs] = useState([]);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        const visibleIds = entries
          .filter((entry) => entry.isIntersecting)
          .map((entry) => entry.target.id);
        setVisibleDivs(visibleIds);
      },
      { root: null, rootMargin: "0px", threshold: 0.5 }
    );

    const childDivs = parentRef.current.querySelectorAll("div");
    childDivs.forEach((div) => observer.observe(div));

    return () => {
      childDivs.forEach((div) => observer.unobserve(div));
    };
  }, [data]);

  return (
    <div id="parent" ref={parentRef}>
      {data.map((item) => (
        <div key={item.id} id={item.id}>
          {item.title}
        </div>
      ))}
    </div>
  );
};

export default ParentComponent;
```

In this example, we are using the `IntersectionObserver` API to observe the child divs of the `#parent` div. The `IntersectionObserver` constructor takes a callback function that is called whenever a target element intersects with the root element (in this case, the viewport). We are using the `isIntersecting` property of the `entry` object to determine if the target element is visible on the viewport. If it is, we add its `id` to the `visibleDivs` state.

We are also using the `useRef` hook to get a reference to the `#parent` div, and the `useEffect` hook to set up and clean up the `IntersectionObserver`. Finally, we are rendering the child divs using the `map` function and passing the `data` prop.

Note that we are using the `key` prop in the child divs to help React identify which elements have changed when the `data` prop changes. This is important for performance reasons.

There are also some npm packages available that can help you with this, such as `react-intersection-