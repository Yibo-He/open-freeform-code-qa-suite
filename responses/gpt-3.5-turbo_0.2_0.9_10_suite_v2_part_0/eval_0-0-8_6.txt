Sure! Here is a recursive function that can find the object with the given `id` value in the nested object tree:

```javascript
function findObject(id, obj) {
  if (obj.id === id) {
    return obj;
  }
  for (let i = 0; i < obj.child.length; i++) {
    const result = findObject(id, obj.child[i]);
    if (result) {
      return result;
    }
  }
}
```

You can call this function by passing the `id` value and the root object of the nested object tree:

```javascript
const nestedObject = {
  "id": "A",
  "name": "Item A",
  "child": [
    {
      "id": "B",
      "name": "Item B",
      "child": [
        {
          "id": "C",
          "name": "Item C",
          "child": []
        }
      ]
    },
    {
      "id": "D",
      "name": "Item D",
      "child": []
    }
  ]
};

const result = findObject("C", nestedObject);
console.log(result);
```

This will output:

```javascript
{
  "id": "C",
  "name": "Item C",
  "child": []
}
```