To improve the efficiency and follow best practices, you should move the styled component outside of the functional component. This way, the styled component is only created once and can be reused by multiple instances of the functional component. Here's the refactored code:

```javascript
import React from 'react'
import styled from 'styled-components'

const TabWrapper = styled.li`
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 100px;
  margin: 1px;
  font-size: 3em;
  color: ${props => (props.isSelected ? `white` : `black`)};
  background-color: ${props => (props.isSelected ? `black` : `#C4C4C4`)};
  cursor: ${props => (props.isSelected ? 'default' : `pointer`)};
`

const Tab = ({ onClick, isSelected, children }) => {
  return <TabWrapper isSelected={isSelected} onClick={onClick}>{children}</TabWrapper>
}

export default Tab
```

In the refactored code, the `TabWrapper` styled component is defined outside of the functional component and takes in a prop called `isSelected`. This prop is used to conditionally set the `color` and `background-color` styles. In the functional component, we pass in the `isSelected` prop to the `TabWrapper` component and also pass in the `onClick` and `children` props as before.